// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    Not(in=instruction[15],out=NotInstruction15);
    Mux16(a=ALUOutput,b=instruction,sel=NotInstruction15,out=ARegisterInput);

    And(a=instruction[15],b=instruction[0],out=control0);
    And(a=instruction[15],b=instruction[1],out=control1);
    And(a=instruction[15],b=instruction[2],out=control2);
    And(a=instruction[15],b=instruction[3],out=control3);
    And(a=instruction[15],b=instruction[4],out=control4);
    And(a=instruction[15],b=instruction[5],out=control5);
    And(a=instruction[15],b=instruction[6],out=control6);
    And(a=instruction[15],b=instruction[7],out=control7);
    And(a=instruction[15],b=instruction[8],out=control8);
    And(a=instruction[15],b=instruction[9],out=control9);
    And(a=true,b=instruction[10],out=control10);
    And(a=true,b=instruction[11],out=control11);
    And(a=instruction[15],b=instruction[12],out=control12);
    And(a=instruction[15],b=instruction[13],out=control13);
    And(a=instruction[15],b=instruction[14],out=control14);

    And(a=control3,b=control3,out=writeM);
    
    Or(a=control5,b=NotInstruction15,out=loadARegister);
    ARegister(in=ARegisterInput,load=loadARegister,out[0..14]=addressM,out=ARegisterOutput);

    Mux16(a=ARegisterOutput,b=inM,sel=control12,out=inToALUB);
    
    DRegister(in=ALUOutput,load=control4,out=inToALUA);
    
    ALU(x=inToALUA,y=inToALUB,zx=control11,nx=control10,zy=control9,ny=control8,f=control7,no=control6,out=ALUOutput,out=outM,zr=zr,ng=ng);
    
    
    PC(in=ARegisterOutput,load=loadbitpc,inc=incbitpc,reset=reset,out[0..14]=pc);
    And(a=control1,b=zr,out=loadterm1);
    And(a=ng,b=control2,out=loadterm2);
    Not(in=zr,out=notzr);
    Not(in=ng,out=notng);
    And(a=control0,b=notzr,out=loadterm3temp);
    And(a=loadterm3temp,b=notng,out=loadterm3);
    Or(a=loadterm1,b=loadterm2,out=loadtermtemp);
    Or(a=loadtermtemp,b=loadterm3,out=loadbitpc);
    Not(in=loadbitpc,out=incbitpc);


}